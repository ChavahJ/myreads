{"ast":null,"code":"var _jsxFileName = \"/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bookshelf = ({\n  allBooks,\n  onUpdateAPI\n}) => {\n  _s();\n\n  const [currentBooks, setCurrentBooks] = useState([]);\n  const [futureBooks, setFutureBooks] = useState([]);\n  const [pastBooks, setPastBooks] = useState([]);\n  const listOfShelves = [{\n    \"title\": \"Currently Reading\",\n    \"type\": \"currentlyReading\"\n  }, {\n    \"title\": \"Future Reading\",\n    \"type\": \"wantToRead\"\n  }, {\n    \"title\": \"Past Reading\",\n    \"type\": \"read\"\n  }];\n  useEffect(() => {\n    if (Array.isArray(allBooks) && allBooks.length > 0) {\n      const getAllShelves = () => {\n        const currentlyReading = allBooks.filter(book => book.shelf === \"currentlyReaindg\");\n        setCurrentBooks(currentlyReading);\n        console.log(currentlyReading);\n        const wantToRead = allBooks.filter(book => book.shelf === \"wantToRead\");\n        setFutureBooks(wantToRead);\n        const read = allBooks.filter(book => book.shelf === \"read\");\n        setPastBooks(read);\n      };\n\n      getAllShelves();\n    }\n  }, [allBooks]);\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n    if (oldShelf === \"currentlyReading\") {\n      let newBooks = currentBooks.pop(book);\n      setCurrentBooks(newBooks);\n    }\n\n    if (oldShelf === \"wantToRead\") {\n      let newBooks = futureBooks.pop(book);\n      setFutureBooks(newBooks);\n    }\n\n    if (oldShelf === \"read\") {\n      let newBooks = pastBooks.pop(book);\n      setPastBooks(newBooks);\n    }\n\n    if (newShelf === \"currentlyReading\") {\n      let newBooks = currentBooks.push(book);\n      setCurrentBooks(newBooks);\n    }\n\n    if (newShelf === \"wantToRead\") {\n      let newBooks = futureBooks.push(book);\n      setFutureBooks(newBooks);\n    }\n\n    if (newShelf === \"read\") {\n      let newBooks = pastBooks.push(book);\n      setPastBooks(newBooks);\n    }\n\n    onUpdateAPI(book, newShelf);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: listOfShelves.map(shelf => {\n      let booksInList = [];\n\n      if (shelf.type === \"currentlyReading\") {\n        booksInList = currentBooks;\n      }\n\n      if (shelf.type === \"wantToRead\") {\n        booksInList = futureBooks;\n      }\n\n      if (shelf.type === \"read\") {\n        booksInList = pastBooks;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bookshelf\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"bookshelf-title\",\n          children: shelf.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookshelf-books\",\n          children: /*#__PURE__*/_jsxDEV(Booklist, {\n            booksInList: booksInList,\n            onUpdateBookshelf: updateBookshelf\n          }, shelf.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, shelf.type, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Bookshelf, \"NKXfMNuSwNSHYnzGOIju62oOH1U=\");\n\n_c = Bookshelf;\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired\n};\nexport default Bookshelf;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bookshelf\");","map":{"version":3,"sources":["/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js"],"names":["PropTypes","Booklist","Bookshelf","allBooks","onUpdateAPI","currentBooks","setCurrentBooks","useState","futureBooks","setFutureBooks","pastBooks","setPastBooks","listOfShelves","useEffect","Array","isArray","length","getAllShelves","currentlyReading","filter","book","shelf","console","log","wantToRead","read","updateBookshelf","oldShelf","newShelf","newBooks","pop","push","map","booksInList","type","title","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["\nimport PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\n\nconst Bookshelf = ({ allBooks, onUpdateAPI }) => {\n  const [currentBooks, setCurrentBooks] = useState([]);\n  const [futureBooks, setFutureBooks] = useState([]);\n  const [pastBooks, setPastBooks] = useState([]);\n\n  const listOfShelves = [\n    { \"title\": \"Currently Reading\", \"type\": \"currentlyReading\" },\n    { \"title\": \"Future Reading\", \"type\": \"wantToRead\" },\n    { \"title\": \"Past Reading\", \"type\": \"read\" }\n  ]\n\n  useEffect(() => {\n    if (Array.isArray(allBooks) && allBooks.length > 0) {\n      const getAllShelves = () => {\n        const currentlyReading = allBooks.filter((book) => book.shelf === \"currentlyReaindg\");\n        setCurrentBooks(currentlyReading);\n        console.log(currentlyReading);\n        const wantToRead = allBooks.filter((book) => book.shelf === \"wantToRead\");\n        setFutureBooks(wantToRead);\n        const read = allBooks.filter((book) => book.shelf === \"read\");\n        setPastBooks(read);\n      }\n      getAllShelves();\n    }\n  }, [allBooks]);\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n    if (oldShelf === \"currentlyReading\") {\n      let newBooks = currentBooks.pop(book);\n      setCurrentBooks(newBooks);\n    }\n    if (oldShelf === \"wantToRead\") {\n      let newBooks = futureBooks.pop(book);\n      setFutureBooks(newBooks);\n    }\n    if (oldShelf === \"read\") {\n      let newBooks = pastBooks.pop(book)\n      setPastBooks(newBooks);\n    }\n\n    if (newShelf === \"currentlyReading\") {\n      let newBooks = currentBooks.push(book);\n      setCurrentBooks(newBooks);\n    }\n    if (newShelf === \"wantToRead\") {\n      let newBooks = futureBooks.push(book);\n      setFutureBooks(newBooks);\n    }\n    if (newShelf === \"read\") {\n      let newBooks = pastBooks.push(book);\n      setPastBooks(newBooks);\n    }\n\n    onUpdateAPI(book, newShelf);\n  }\n\n  return (\n    <div>\n      {listOfShelves.map((shelf) => {\n        let booksInList = [];\n        if (shelf.type === \"currentlyReading\") {\n          booksInList = currentBooks;\n        }\n        if (shelf.type === \"wantToRead\") {\n          booksInList = futureBooks;\n        }\n        if (shelf.type === \"read\") {\n          booksInList = pastBooks;\n        }\n        return (\n          <div key={shelf.type} className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{shelf.title}</h2>\n            <div className=\"bookshelf-books\">\n              <Booklist key={shelf.type} booksInList={booksInList} onUpdateBookshelf={updateBookshelf} />\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired,\n};\n\nexport default Bookshelf;"]},"metadata":{},"sourceType":"module"}