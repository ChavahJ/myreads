{"ast":null,"code":"var _jsxFileName = \"/home/workspace/nd0191-c1-myreads/starter/src/SearchBooks.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Booklist from \"./Booklist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBooks = ({\n  allBooks,\n  onUpdateAPI\n}) => {\n  _s();\n\n  const [query, setQuery] = useState([]);\n  const [booksInSearch, setBooksInSearch] = useState([]);\n  let navigate = useNavigate();\n\n  const searchBooks = event => {\n    let query = event.target.value;\n    setQuery(query);\n    BooksAPI.search(query, 20).then(response => {\n      if (!response.error) {\n        response.forEach(bookInSearch => {\n          allBooks.forEach(book => {\n            if (book.id === bookInSearch.id) {\n              bookInSearch.shelf = book.shelf;\n            }\n          });\n        });\n      }\n\n      setBooksInSearch(response);\n    }).catch(e => {\n      setBooksInSearch([]);\n    });\n  };\n\n  const updateBookshelf = (book, newShelf) => {\n    booksInSearch.forEach(bookInSearch => {\n      if (book.id === bookInSearch.id) {\n        bookInSearch.shelf = newShelf;\n      }\n    });\n    onUpdateAPI(book, newShelf);\n    navigate;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"close-search\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by title, author, or ISBN\",\n          value: query,\n          onChange: event => searchBooks(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: /*#__PURE__*/_jsxDEV(Booklist, {\n        booksInList: booksInSearch,\n        onUpdateBookshelf: updateBookshelf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBooks, \"06QqgC6S81SpeQkHdUmLgOwSt0w=\", false, function () {\n  return [useNavigate];\n});\n\n_c = SearchBooks;\nSearchBooks.propTypes = {\n  allBooks: PropTypes.array.isRequired\n};\nexport default SearchBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBooks\");","map":{"version":3,"sources":["/home/workspace/nd0191-c1-myreads/starter/src/SearchBooks.js"],"names":["useState","Link","useNavigate","PropTypes","BooksAPI","Booklist","SearchBooks","allBooks","onUpdateAPI","query","setQuery","booksInSearch","setBooksInSearch","navigate","searchBooks","event","target","value","search","then","response","error","forEach","bookInSearch","book","id","shelf","catch","e","updateBookshelf","newShelf","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Booklist from \"./Booklist\";\n\nconst SearchBooks = ({ allBooks, onUpdateAPI }) => {\n  const [query, setQuery] = useState([]);\n\n  const [booksInSearch, setBooksInSearch] = useState([]);\n\n  let navigate = useNavigate();\n\n  const searchBooks = (event) => {\n    let query = event.target.value;\n    setQuery(query);\n    BooksAPI\n      .search(query, 20)\n      .then((response) => {\n        if (!response.error) {\n          response.forEach((bookInSearch) => {\n            allBooks.forEach((book) => {\n              if (book.id === bookInSearch.id) {\n                bookInSearch.shelf = book.shelf;\n              }\n            })\n          });\n        }\n        setBooksInSearch(response);\n      })\n      .catch((e) => {\n        setBooksInSearch([]);\n      });\n  }\n  const updateBookshelf = (book, newShelf) => {\n    booksInSearch.forEach((bookInSearch) => {\n      if (book.id === bookInSearch.id) {\n        bookInSearch.shelf = newShelf;\n      }\n    });\n    onUpdateAPI(book, newShelf);\n    navigate\n  }\n\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link\n          to=\"/\"\n          className=\"close-search\"\n        >\n          Close\n        </Link>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title, author, or ISBN\"\n            value={query}\n            onChange={(event) => searchBooks(event)}\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <Booklist booksInList={booksInSearch} onUpdateBookshelf={updateBookshelf} />\n      </div>\n    </div>\n  )\n}\n\nSearchBooks.propTypes = {\n  allBooks: PropTypes.array.isRequired,\n};\n\nexport default SearchBooks;"]},"metadata":{},"sourceType":"module"}