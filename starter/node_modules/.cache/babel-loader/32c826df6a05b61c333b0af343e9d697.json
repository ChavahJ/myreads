{"ast":null,"code":"var _jsxFileName = \"/home/workspace/nd0191-c1-myreads/starter/src/SearchBooks.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Book from \"./Book\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBooks = ({\n  allBooks,\n  onUpdateShelves\n}) => {\n  _s();\n\n  const [query, setQuery] = useState([]);\n  const [booksInSearch, setBooksInSearch] = useState([]);\n\n  const searchBooks = query => {\n    setQuery(query);\n    BooksAPI.search(query, 20).then(response => {\n      if (!response.error) {\n        console.log(allBooks);\n        console.log(response);\n        response.forEach(bookInSearch => {\n          allBooks.forEach(book => {\n            if (book.id === bookInSearch.id) {\n              bookInSearch.shelf = book.shelf;\n            } else {\n              book.shelf = \"none\";\n            }\n          });\n        });\n      }\n\n      setBooksInSearch(response);\n    }).catch(e => {\n      setBooksInSearch([]);\n    });\n  };\n\n  const updateBookshelf = (book, newShelf) => {\n    booksInSearch.forEach(bookInSearch => {\n      if (book.id === bookInSearch.id) {\n        bookInSearch.shelf = newShelf;\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"close-search\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by title, author, or ISBN\",\n          value: query,\n          onChange: event => searchBooks(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: Array.isArray(booksInSearch) && booksInSearch.length > 0 && /*#__PURE__*/_jsxDEV(Booklist, {\n        booksInList: booksByShelf[shelf],\n        onUpdateBookshelf: updateBookshelf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBooks, \"gN0kvOCvlFuyjVVRCIhe00UHoas=\");\n\n_c = SearchBooks;\nSearchBooks.propTypes = {\n  allBooks: PropTypes.array.isRequired,\n  onUpdateShelves: PropTypes.func.isRequired\n};\nexport default SearchBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBooks\");","map":{"version":3,"sources":["/home/workspace/nd0191-c1-myreads/starter/src/SearchBooks.js"],"names":["useState","Link","PropTypes","BooksAPI","Book","SearchBooks","allBooks","onUpdateShelves","query","setQuery","booksInSearch","setBooksInSearch","searchBooks","search","then","response","error","console","log","forEach","bookInSearch","book","id","shelf","catch","e","updateBookshelf","newShelf","event","target","value","Array","isArray","length","booksByShelf","propTypes","array","isRequired","func"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Book from \"./Book\";\n\nconst SearchBooks = ({ allBooks, onUpdateShelves }) => {\n    const [query, setQuery] = useState([]);\n\n    const [booksInSearch, setBooksInSearch] = useState([]);\n\n    const searchBooks = (query) => {\n        setQuery(query);\n        BooksAPI\n            .search(query, 20)\n            .then((response) => {\n                if (!response.error) {\n                    console.log(allBooks);\n                    console.log(response);\n                    response.forEach((bookInSearch) => {\n                        allBooks.forEach((book) => {\n                            if (book.id === bookInSearch.id) {\n                                bookInSearch.shelf = book.shelf;\n                            } else {\n                              book.shelf = \"none\";\n                            }\n                        })\n                    });\n                }\n                setBooksInSearch(response);\n            })\n            .catch((e) => {\n                setBooksInSearch([]);\n            });\n    }\n    const updateBookshelf = (book, newShelf) => {\n      booksInSearch.forEach((bookInSearch) => {\n        if (book.id === bookInSearch.id ) {\n          bookInSearch.shelf = newShelf;\n        }\n      })\n    }\n\n    return (\n        <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n                <Link\n                    to=\"/\"\n                    className=\"close-search\"\n                >\n                    Close\n                </Link>\n                <div className=\"search-books-input-wrapper\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search by title, author, or ISBN\"\n                        value={query}\n                        onChange={(event) => searchBooks(event.target.value)}\n                    />\n                </div>\n            </div>\n            <div className=\"search-books-results\">\n                {(Array.isArray(booksInSearch) && booksInSearch.length > 0) &&\n                                <Booklist booksInList={booksByShelf[shelf]} onUpdateBookshelf={updateBookshelf} />\n\n                }\n            </div>\n        </div>\n    )\n}\n\nSearchBooks.propTypes = {\n    allBooks: PropTypes.array.isRequired,\n    onUpdateShelves: PropTypes.func.isRequired\n};\n\nexport default SearchBooks;"]},"metadata":{},"sourceType":"module"}