{"ast":null,"code":"var _jsxFileName = \"/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bookshelf = ({\n  allBooks,\n  onUpdateAPI\n}) => {\n  _s();\n\n  const [currentBooks, setCurrentBooks] = useState([]);\n  const [futureBooks, setFutureBooks] = useState([]);\n  const [pastBooks, setPastBooks] = useState([]);\n  const listOfShelves = [{\n    \"title\": \"Currently Reading\",\n    \"type\": \"currentlyReading\"\n  }, {\n    \"title\": \"Future Reading\",\n    \"type\": \"wantToRead\"\n  }, {\n    \"title\": \"Past Reading\",\n    \"type\": \"read\"\n  }];\n  useEffect(() => {\n    if (Array.isArray(allBooks) && allBooks.length > 0) {\n      const getAllShelves = () => {\n        const currentlyReading = allBooks.filter(book => book.shelf === \"currentlyReaindg\");\n        setCurrentBooks(currentlyReading);\n        const wantToRead = allBooks.filter(book => book.shelf === \"wantToRead\");\n        setFutureBooks(wantToRead);\n        const read = allBooks.filter(book => book.shelf === \"read\");\n        setPastBooks(read);\n      };\n\n      getAllShelves();\n    }\n  }, [allBooks]);\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n    if (oldShelf === \"currentlyReading\") {\n      let newBooks = currentBooks.pop(book);\n      setCurrentBooks(newBooks);\n    }\n\n    if (oldShelf === \"wantToRead\") {\n      let newBooks = futureBooks.pop(book);\n      setFutureBooks(newBooks);\n    }\n\n    if (oldShelf === \"read\") {\n      let newBooks = pastBooks.pop(book);\n      setPastBooks(newBooks);\n    }\n\n    if (newShelf === \"currentlyReading\") {\n      let newBooks;\n      setCurrentBooks(currentBooks.push(book));\n    }\n\n    if (newShelf === \"wantToRead\") {\n      setFutureBooks(futureBooks.push(book));\n    }\n\n    if (newShelf === \"read\") {\n      setPastBooks(pastBooks.push(book));\n    }\n\n    onUpdateAPI(book, newShelf);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: listOfShelves.map(shelf => {\n      let booksInList = [];\n\n      if (shelf.type === \"currentlyReading\") {\n        booksInList = currentBooks;\n      }\n\n      if (shelf.type === \"wantToRead\") {\n        booksInList = futureBooks;\n      }\n\n      if (shelf.type === \"read\") {\n        booksInList = pastBooks;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bookshelf\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"bookshelf-title\",\n          children: shelf.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookshelf-books\",\n          children: /*#__PURE__*/_jsxDEV(Booklist, {\n            booksInList: booksInList,\n            onUpdateBookshelf: updateBookshelf\n          }, shelf.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, shelf.type, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Bookshelf, \"NKXfMNuSwNSHYnzGOIju62oOH1U=\");\n\n_c = Bookshelf;\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired\n};\nexport default Bookshelf;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bookshelf\");","map":{"version":3,"sources":["/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js"],"names":["useState","useEffect","PropTypes","Booklist","Bookshelf","allBooks","onUpdateAPI","currentBooks","setCurrentBooks","futureBooks","setFutureBooks","pastBooks","setPastBooks","listOfShelves","Array","isArray","length","getAllShelves","currentlyReading","filter","book","shelf","wantToRead","read","updateBookshelf","oldShelf","newShelf","newBooks","pop","push","map","booksInList","type","title","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\n\nconst Bookshelf = ({ allBooks, onUpdateAPI }) => {\n  const [currentBooks, setCurrentBooks] = useState([]);\n  const [futureBooks, setFutureBooks] = useState([]);\n  const [pastBooks, setPastBooks] = useState([]);\n\n  const listOfShelves = [\n    { \"title\": \"Currently Reading\", \"type\": \"currentlyReading\" },\n    { \"title\": \"Future Reading\", \"type\": \"wantToRead\" },\n    { \"title\": \"Past Reading\", \"type\": \"read\" }\n  ]\n\n  useEffect(() => {\n    if (Array.isArray(allBooks) && allBooks.length > 0) {\n      const getAllShelves = () => {\n        const currentlyReading = allBooks.filter((book) => book.shelf === \"currentlyReaindg\");\n        setCurrentBooks(currentlyReading);\n        const wantToRead = allBooks.filter((book) => book.shelf === \"wantToRead\");\n        setFutureBooks(wantToRead);\n        const read = allBooks.filter((book) => book.shelf === \"read\");\n        setPastBooks(read);\n      }\n      getAllShelves();\n    }\n  }, [allBooks]);\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n    if (oldShelf === \"currentlyReading\") {\n      let newBooks = currentBooks.pop(book);\n      setCurrentBooks(newBooks);\n    }\n    if (oldShelf === \"wantToRead\") {\n      let newBooks = futureBooks.pop(book);\n      setFutureBooks(newBooks);\n    }\n    if (oldShelf === \"read\") {\n      let newBooks = pastBooks.pop(book)\n      setPastBooks(newBooks);\n    }\n\n    if (newShelf === \"currentlyReading\") {\n      let newBooks\n      setCurrentBooks(currentBooks.push(book));\n    }\n    if (newShelf === \"wantToRead\") {\n      setFutureBooks(futureBooks.push(book));\n    }\n    if (newShelf === \"read\") {\n      setPastBooks(pastBooks.push(book));\n    }\n\n    onUpdateAPI(book, newShelf);\n  }\n\n  return (\n    <div>\n      {listOfShelves.map((shelf) => {\n        let booksInList = [];\n        if (shelf.type === \"currentlyReading\") {\n          booksInList = currentBooks;\n        }\n        if (shelf.type === \"wantToRead\") {\n          booksInList = futureBooks;\n        }\n        if (shelf.type === \"read\") {\n          booksInList = pastBooks;\n        }\n        return (\n          <div key={shelf.type} className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{shelf.title}</h2>\n            <div className=\"bookshelf-books\">\n              <Booklist key={shelf.type} booksInList={booksInList} onUpdateBookshelf={updateBookshelf} />\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired,\n};\n\nexport default Bookshelf;"]},"metadata":{},"sourceType":"module"}