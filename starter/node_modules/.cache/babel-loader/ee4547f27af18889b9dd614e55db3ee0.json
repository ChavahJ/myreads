{"ast":null,"code":"var _jsxFileName = \"/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bookshelf = ({\n  allBooks,\n  onUpdateAPI\n}) => {\n  _s();\n\n  const [currentBooks, setCurrentBooks] = useState([]);\n  const [futureBooks, setFutureBooks] = useState([]);\n  const [pastBooks, setPastBooks] = useState([]);\n  const listOfShelves = [{\n    \"title\": \"Currently Reading\",\n    \"type\": \"currentlyReading\"\n  }, {\n    \"title\": \"Future Reading\",\n    \"type\": \"wantToRead\"\n  }, {\n    \"title\": \"Past Reading\",\n    \"type\": \"read\"\n  }];\n  useEffect(() => {\n    const getAllShelves = () => {\n      const currentlyReading = allBooks.filter(book => book.shelf === \"currentlyReaindg\");\n      setCurrentBooks(currentlyReading);\n      const wantToRead = allBooks.filter(book => book.shelf === \"wantToRead\");\n      setFutureBooks(wantToRead);\n      const read = allBooks.filter(book => book.shelf === \"read\");\n      setPastBooks(read);\n    };\n\n    getAllShelves();\n    console.log(currentBooks);\n  }, [allBooks]);\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n    if (ol) switch (oldShelf) {\n      case 'currentlyReaindg':\n        return setCurrentBooks(currentBooks.pop(book));\n\n      case 'wantToRead':\n        return setFutureBooks(futureBooks.pop(book));\n\n      case 'read':\n        return setPastBooks(pastBooks.pop(book));\n    }\n\n    switch (newShelf) {\n      case 'currentlyReaindg':\n        return setCurrentBooks(currentBooks.push(book));\n\n      case 'wantToRead':\n        return setFutureBooks(futureBooks.push(book));\n\n      case 'read':\n        return setPastBooks(pastBooks.push(book));\n    }\n\n    onUpdateAPI(book, newShelf);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: listOfShelves.forEach(shelf => {\n      let shelfType = shelf.type;\n      let booksInList = [];\n\n      if (shelfType = \"currentlyReading\") {\n        booksInList = currentBooks;\n      }\n\n      if (shelfType = \"wantToRead\") {\n        booksInList = futureBooks;\n      }\n\n      if (shelfType = \"read\") {\n        booksInList = pastBooks;\n      }\n\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        className: \"bookshelf\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"bookshelf-title\",\n          children: shelf.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookshelf-books\",\n          children: /*#__PURE__*/_jsxDEV(Booklist, {\n            booksInList: booksInList,\n            onUpdateBookshelf: updateBookshelf\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Bookshelf, \"NKXfMNuSwNSHYnzGOIju62oOH1U=\");\n\n_c = Bookshelf;\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired\n};\nexport default Bookshelf;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bookshelf\");","map":{"version":3,"sources":["/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js"],"names":["useState","useEffect","PropTypes","Booklist","Bookshelf","allBooks","onUpdateAPI","currentBooks","setCurrentBooks","futureBooks","setFutureBooks","pastBooks","setPastBooks","listOfShelves","getAllShelves","currentlyReading","filter","book","shelf","wantToRead","read","console","log","updateBookshelf","oldShelf","newShelf","ol","pop","push","forEach","shelfType","type","booksInList","title","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\n\nconst Bookshelf = ({ allBooks, onUpdateAPI }) => {\n  const [currentBooks, setCurrentBooks] = useState([]);\n  const [futureBooks, setFutureBooks] = useState([]);\n  const [pastBooks, setPastBooks] = useState([]);\n  \n  const listOfShelves = [\n    {\"title\" : \"Currently Reading\", \"type\" : \"currentlyReading\"},\n    {\"title\" : \"Future Reading\", \"type\" : \"wantToRead\"},\n    {\"title\" : \"Past Reading\", \"type\" : \"read\"}\n  ]\n\n  useEffect(() => {\n      const getAllShelves = () => {\n        const currentlyReading = allBooks.filter((book) => book.shelf === \"currentlyReaindg\");\n        setCurrentBooks(currentlyReading);\n        const wantToRead = allBooks.filter((book) => book.shelf === \"wantToRead\");\n        setFutureBooks(wantToRead);\n        const read = allBooks.filter((book) => book.shelf === \"read\");\n        setPastBooks(read);\n      }\n      getAllShelves();\n      console.log(currentBooks);\n  }, [allBooks]);\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n    if (ol)\n    switch (oldShelf) {\n      case 'currentlyReaindg':\n        return setCurrentBooks(currentBooks.pop(book));\n      case 'wantToRead':\n        return setFutureBooks(futureBooks.pop(book));\n      case 'read':\n        return setPastBooks(pastBooks.pop(book));\n    }\n\n    switch (newShelf) {\n      case 'currentlyReaindg':\n        return setCurrentBooks(currentBooks.push(book));\n      case 'wantToRead':\n        return setFutureBooks(futureBooks.push(book));\n      case 'read':\n        return setPastBooks(pastBooks.push(book));\n    }\n\n    onUpdateAPI(book, newShelf);\n  }\n\n  return (\n    <div>\n      {listOfShelves.forEach((shelf) => {\n        let shelfType = shelf.type;\n        let booksInList = [];\n\n        if (shelfType = \"currentlyReading\") {\n          booksInList = currentBooks;\n        }\n\n        if (shelfType = \"wantToRead\") {\n          booksInList = futureBooks;\n        }\n\n        if (shelfType = \"read\") {\n          booksInList = pastBooks;\n        }\n\n        <div className=\"bookshelf\">\n          <h2 className=\"bookshelf-title\">{shelf.title}</h2>\n          <div className=\"bookshelf-books\">\n            <Booklist booksInList={booksInList} onUpdateBookshelf={updateBookshelf} />\n          </div>\n        </div>\n      })}\n    </div>\n  )\n}\n\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired,\n};\n\nexport default Bookshelf;"]},"metadata":{},"sourceType":"module"}