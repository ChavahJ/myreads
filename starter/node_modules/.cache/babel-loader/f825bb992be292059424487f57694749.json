{"ast":null,"code":"var _jsxFileName = \"/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bookshelf = ({\n  allBooks,\n  onUpdateAPI\n}) => {\n  _s();\n\n  const listOfShelves = [{\n    \"title\": \"Currently Reading\",\n    \"type\": \"currentlyReading\"\n  }, {\n    \"title\": \"Future Reading\",\n    \"type\": \"wantToRead\"\n  }, {\n    \"title\": \"Past Reading\",\n    \"type\": \"read\"\n  }];\n  useEffect(() => {\n    if (Array.isArray(allBooks) && allBooks.length > 0) {\n      const getAllShelves = () => {\n        const currentlyReading = allBooks.filter(book => book.shelf === \"currentlyReaindg\");\n        setCurrentBooks(currentlyReading);\n        console.log(currentlyReading);\n        const wantToRead = allBooks.filter(book => book.shelf === \"wantToRead\");\n        setFutureBooks(wantToRead);\n        const read = allBooks.filter(book => book.shelf === \"read\");\n        setPastBooks(read);\n      };\n\n      getAllShelves();\n    }\n  }, [allBooks]);\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n    onUpdateAPI(book, newShelf);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: listOfShelves.map(shelf => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookshelf\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"bookshelf-title\",\n        children: shelf.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bookshelf-books\",\n        children: /*#__PURE__*/_jsxDEV(Booklist, {\n          booksInList: allBooks.filter(book => book.shelf === shelf.type),\n          onUpdateBookshelf: onUpdateAPI\n        }, shelf.type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, shelf.type, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Bookshelf, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Bookshelf;\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired\n};\nexport default Bookshelf;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bookshelf\");","map":{"version":3,"sources":["/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js"],"names":["PropTypes","Booklist","Bookshelf","allBooks","onUpdateAPI","listOfShelves","useEffect","Array","isArray","length","getAllShelves","currentlyReading","filter","book","shelf","setCurrentBooks","console","log","wantToRead","setFutureBooks","read","setPastBooks","updateBookshelf","oldShelf","newShelf","map","title","type","propTypes","array","isRequired"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA+B;AAAA;;AAE/C,QAAMC,aAAa,GAAG,CACpB;AAAE,aAAS,mBAAX;AAAgC,YAAQ;AAAxC,GADoB,EAEpB;AAAE,aAAS,gBAAX;AAA6B,YAAQ;AAArC,GAFoB,EAGpB;AAAE,aAAS,cAAX;AAA2B,YAAQ;AAAnC,GAHoB,CAAtB;AAMAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIC,KAAK,CAACC,OAAN,CAAcL,QAAd,KAA2BA,QAAQ,CAACM,MAAT,GAAkB,CAAjD,EAAoD;AAClD,YAAMC,aAAa,GAAG,MAAM;AAC1B,cAAMC,gBAAgB,GAAGR,QAAQ,CAACS,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAe,kBAAzC,CAAzB;AACAC,QAAAA,eAAe,CAACJ,gBAAD,CAAf;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYN,gBAAZ;AACA,cAAMO,UAAU,GAAGf,QAAQ,CAACS,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAe,YAAzC,CAAnB;AACAK,QAAAA,cAAc,CAACD,UAAD,CAAd;AACA,cAAME,IAAI,GAAGjB,QAAQ,CAACS,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAe,MAAzC,CAAb;AACAO,QAAAA,YAAY,CAACD,IAAD,CAAZ;AACD,OARD;;AASAV,MAAAA,aAAa;AACd;AACF,GAbQ,EAaN,CAACP,QAAD,CAbM,CAAT;;AAeA,QAAMmB,eAAe,GAAG,CAACT,IAAD,EAAOU,QAAP,EAAiBC,QAAjB,KAA8B;AAGpDpB,IAAAA,WAAW,CAACS,IAAD,EAAOW,QAAP,CAAX;AACD,GAJD;;AAMA,sBACE;AAAA,cACGnB,aAAa,CAACoB,GAAd,CAAmBX,KAAD,iBACf;AAAsB,MAAA,SAAS,EAAC,WAAhC;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,kBAAiCA,KAAK,CAACY;AAAvC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACE,QAAC,QAAD;AAEE,UAAA,WAAW,EAAEvB,QAAQ,CAACS,MAAT,CACVC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAeA,KAAK,CAACa,IADpB,CAFf;AAKE,UAAA,iBAAiB,EAAEvB;AALrB,WACOU,KAAK,CAACa,IADb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAUb,KAAK,CAACa,IAAhB;AAAA;AAAA;AAAA;AAAA,YADH;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA/CD;;GAAMzB,S;;KAAAA,S;AAgDNA,SAAS,CAAC0B,SAAV,GAAsB;AACpBzB,EAAAA,QAAQ,EAAEH,SAAS,CAAC6B,KAAV,CAAgBC;AADN,CAAtB;AAGA,eAAe5B,SAAf","sourcesContent":["import PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\n\nconst Bookshelf = ({ allBooks, onUpdateAPI }) => {\n\n  const listOfShelves = [\n    { \"title\": \"Currently Reading\", \"type\": \"currentlyReading\" },\n    { \"title\": \"Future Reading\", \"type\": \"wantToRead\" },\n    { \"title\": \"Past Reading\", \"type\": \"read\" }\n  ]\n\n  useEffect(() => {\n    if (Array.isArray(allBooks) && allBooks.length > 0) {\n      const getAllShelves = () => {\n        const currentlyReading = allBooks.filter((book) => book.shelf === \"currentlyReaindg\");\n        setCurrentBooks(currentlyReading);\n        console.log(currentlyReading);\n        const wantToRead = allBooks.filter((book) => book.shelf === \"wantToRead\");\n        setFutureBooks(wantToRead);\n        const read = allBooks.filter((book) => book.shelf === \"read\");\n        setPastBooks(read);\n      }\n      getAllShelves();\n    }\n  }, [allBooks]);\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n\n\n    onUpdateAPI(book, newShelf);\n  }\n\n  return (\n    <div>\n      {listOfShelves.map((shelf) =>\n          <div key={shelf.type} className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{shelf.title}</h2>\n            <div className=\"bookshelf-books\">\n              <Booklist\n                key={shelf.type}\n                booksInList={allBooks.filter(\n                  (book) => book.shelf === shelf.type\n                )}\n                onUpdateBookshelf={onUpdateAPI}\n              />\n            </div>\n          </div>\n      )}\n    </div>\n  );\n};\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired,\n};\nexport default Bookshelf;"]},"metadata":{},"sourceType":"module"}