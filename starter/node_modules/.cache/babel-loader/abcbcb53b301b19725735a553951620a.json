{"ast":null,"code":"var _jsxFileName = \"/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bookshelf = ({\n  allBooks,\n  onUpdateAPI\n}) => {\n  _s();\n\n  const [currentBooks, setCurrentBooks] = useState([]);\n  const [futureBooks, setFutureBooks] = useState([]);\n  const [pastBooks, setPastBooks] = useState([]);\n  const listOfShelves = [{\n    \"title\": \"Currently Reading\",\n    \"type\": \"currentlyReading\"\n  }, {\n    \"title\": \"Future Reading\",\n    \"type\": \"wantToRead\"\n  }, {\n    \"title\": \"Past Reading\",\n    \"type\": \"read\"\n  }];\n  useEffect(() => {\n    getAllShelves = () => {\n      const currentlyReading = allBooks.filter(book => book.shelf === \"currentlyReaindg\");\n      setCurrentBooks(currentlyReading);\n      const wantToRead = allBooks.filter(book => book.shelf === \"wantToRead\");\n      setFutureBooks(wantToRead);\n      const read = allBooks.filter(book => book.shelf === \"read\");\n      setPastBooks(read);\n    };\n\n    getAllShelves();\n  }, [allBooks]);\n  let booksByShelf = {};\n  listOfShelves.forEach(shelf => {\n    let shelfType = shelf.type;\n    let currentShelf = allBooks.filter(book => book.shelf === shelfType);\n    booksByShelf[shelfType] = currentShelf;\n  });\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n    switch (oldShelf) {\n      case 'currentlyReaindg':\n        return setCurrentBooks(currentBooks.pop(book));\n\n      case 'wantToRead':\n        return setFutureBooks(futureBooks.pop(book));\n\n      case 'wantToRead':\n        return setFutureBooks(futureBooks.pop(book));\n\n      default:\n        throw new Error();\n    }\n\n    booksByShelf[oldShelf].pop(book);\n    booksByShelf[newShelf].push(book);\n    onUpdateAPI(book, newShelf);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: listOfShelves.forEach(shelf => {\n      let shelfType = shelf.type;\n      let currentBooksInList = booksByShelf[shelfType];\n\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        className: \"bookshelf\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"bookshelf-title\",\n          children: shelf.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookshelf-books\",\n          children: /*#__PURE__*/_jsxDEV(Booklist, {\n            booksInList: currentBooksInList,\n            onUpdateBookshelf: updateBookshelf\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Bookshelf, \"NKXfMNuSwNSHYnzGOIju62oOH1U=\");\n\n_c = Bookshelf;\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired\n};\nexport default Bookshelf;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bookshelf\");","map":{"version":3,"sources":["/home/workspace/nd0191-c1-myreads/starter/src/Bookshelf.js"],"names":["useState","useEffect","PropTypes","Booklist","Bookshelf","allBooks","onUpdateAPI","currentBooks","setCurrentBooks","futureBooks","setFutureBooks","pastBooks","setPastBooks","listOfShelves","getAllShelves","currentlyReading","filter","book","shelf","wantToRead","read","booksByShelf","forEach","shelfType","type","currentShelf","updateBookshelf","oldShelf","newShelf","pop","Error","push","currentBooksInList","title","propTypes","array","isRequired"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA+B;AAAA;;AAC/C,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMa,aAAa,GAAG,CACpB;AAAC,aAAU,mBAAX;AAAgC,YAAS;AAAzC,GADoB,EAEpB;AAAC,aAAU,gBAAX;AAA6B,YAAS;AAAtC,GAFoB,EAGpB;AAAC,aAAU,cAAX;AAA2B,YAAS;AAApC,GAHoB,CAAtB;AAMAZ,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,aAAa,GAAG,MAAM;AACpB,YAAMC,gBAAgB,GAAGV,QAAQ,CAACW,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAe,kBAAzC,CAAzB;AACAV,MAAAA,eAAe,CAACO,gBAAD,CAAf;AACA,YAAMI,UAAU,GAAGd,QAAQ,CAACW,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAe,YAAzC,CAAnB;AACAR,MAAAA,cAAc,CAACS,UAAD,CAAd;AACA,YAAMC,IAAI,GAAGf,QAAQ,CAACW,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAe,MAAzC,CAAb;AACAN,MAAAA,YAAY,CAACQ,IAAD,CAAZ;AACD,KAPD;;AAQAN,IAAAA,aAAa;AAChB,GAVQ,EAUN,CAACT,QAAD,CAVM,CAAT;AAaA,MAAIgB,YAAY,GAAG,EAAnB;AAEAR,EAAAA,aAAa,CAACS,OAAd,CAAuBJ,KAAD,IAAW;AAC/B,QAAIK,SAAS,GAAGL,KAAK,CAACM,IAAtB;AACA,QAAIC,YAAY,GAAGpB,QAAQ,CAACW,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAeK,SAAzC,CAAnB;AACAF,IAAAA,YAAY,CAACE,SAAD,CAAZ,GAA0BE,YAA1B;AACD,GAJD;;AAMA,QAAMC,eAAe,GAAG,CAACT,IAAD,EAAOU,QAAP,EAAiBC,QAAjB,KAA8B;AACpD,YAAQD,QAAR;AACE,WAAK,kBAAL;AACE,eAAOnB,eAAe,CAACD,YAAY,CAACsB,GAAb,CAAiBZ,IAAjB,CAAD,CAAtB;;AACF,WAAK,YAAL;AACE,eAAOP,cAAc,CAACD,WAAW,CAACoB,GAAZ,CAAgBZ,IAAhB,CAAD,CAArB;;AACA,WAAK,YAAL;AACA,eAAOP,cAAc,CAACD,WAAW,CAACoB,GAAZ,CAAgBZ,IAAhB,CAAD,CAArB;;AACF;AACE,cAAM,IAAIa,KAAJ,EAAN;AARJ;;AAUAT,IAAAA,YAAY,CAACM,QAAD,CAAZ,CAAuBE,GAAvB,CAA2BZ,IAA3B;AACAI,IAAAA,YAAY,CAACO,QAAD,CAAZ,CAAuBG,IAAvB,CAA4Bd,IAA5B;AACAX,IAAAA,WAAW,CAACW,IAAD,EAAOW,QAAP,CAAX;AACD,GAdD;;AAgBA,sBACE;AAAA,cACGf,aAAa,CAACS,OAAd,CAAuBJ,KAAD,IAAW;AAChC,UAAIK,SAAS,GAAGL,KAAK,CAACM,IAAtB;AACA,UAAIQ,kBAAkB,GAAGX,YAAY,CAACE,SAAD,CAArC;;AACA;AAAA;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,iBAAd;AAAA,oBAAiCL,KAAK,CAACe;AAAvC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,WAAW,EAAED,kBAAvB;AAA2C,YAAA,iBAAiB,EAAEN;AAA9D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAMD,KATA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA9DD;;GAAMtB,S;;KAAAA,S;AAgENA,SAAS,CAAC8B,SAAV,GAAsB;AACpB7B,EAAAA,QAAQ,EAAEH,SAAS,CAACiC,KAAV,CAAgBC;AADN,CAAtB;AAIA,eAAehC,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Booklist from \"./Booklist\";\n\nconst Bookshelf = ({ allBooks, onUpdateAPI }) => {\n  const [currentBooks, setCurrentBooks] = useState([]);\n  const [futureBooks, setFutureBooks] = useState([]);\n  const [pastBooks, setPastBooks] = useState([]);\n  \n  const listOfShelves = [\n    {\"title\" : \"Currently Reading\", \"type\" : \"currentlyReading\"},\n    {\"title\" : \"Future Reading\", \"type\" : \"wantToRead\"},\n    {\"title\" : \"Past Reading\", \"type\" : \"read\"}\n  ]\n\n  useEffect(() => {\n      getAllShelves = () => {\n        const currentlyReading = allBooks.filter((book) => book.shelf === \"currentlyReaindg\");\n        setCurrentBooks(currentlyReading);\n        const wantToRead = allBooks.filter((book) => book.shelf === \"wantToRead\");\n        setFutureBooks(wantToRead);\n        const read = allBooks.filter((book) => book.shelf === \"read\");\n        setPastBooks(read);\n      }\n      getAllShelves();\n  }, [allBooks]);\n\n\n  let booksByShelf = {};\n\n  listOfShelves.forEach((shelf) => {\n    let shelfType = shelf.type;\n    let currentShelf = allBooks.filter((book) => book.shelf === shelfType);\n    booksByShelf[shelfType] = currentShelf;\n  });\n\n  const updateBookshelf = (book, oldShelf, newShelf) => {\n    switch (oldShelf) {\n      case 'currentlyReaindg':\n        return setCurrentBooks(currentBooks.pop(book));\n      case 'wantToRead':\n        return setFutureBooks(futureBooks.pop(book));\n        case 'wantToRead':\n        return setFutureBooks(futureBooks.pop(book));\n      default:\n        throw new Error();\n    }\n    booksByShelf[oldShelf].pop(book);\n    booksByShelf[newShelf].push(book);\n    onUpdateAPI(book, newShelf);\n  }\n\n  return (\n    <div>\n      {listOfShelves.forEach((shelf) => {\n        let shelfType = shelf.type;\n        let currentBooksInList = booksByShelf[shelfType];\n        <div className=\"bookshelf\">\n          <h2 className=\"bookshelf-title\">{shelf.title}</h2>\n          <div className=\"bookshelf-books\">\n            <Booklist booksInList={currentBooksInList} onUpdateBookshelf={updateBookshelf} />\n          </div>\n        </div>\n      })}\n    </div>\n  )\n}\n\nBookshelf.propTypes = {\n  allBooks: PropTypes.array.isRequired,\n};\n\nexport default Bookshelf;"]},"metadata":{},"sourceType":"module"}